---
layout: post
title:  "나동빈 곱하기 혹은 더하기"
date:   2022-06-12 18:15:00 +0900
categories: Python Greedy Algorithm
---
__문제__

각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 곱하기 혹은 더하기 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 숫자를 구하는 프로그램을 만들어라. 단, 더하기 보다 곱하기를 먼저 계산하는 일반적인 사칙연산 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정한다.

예를 들어, 02984라는 문자열이 주어진다면, 만들어질 수 있는 가장 큰 수는 순서대로 0+2 * 9 * 8 * 4 = 576 이다. 또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어진다.

__입력조건__

첫째 줄에 여러 개의 숫자로 구성된 하나의 문자열 S가 주어진다.(1 <= S의 길이 <= 20)

__출력조건__

첫째 줄에 만들어질 수있는 가장 큰 수를 출력한다.

__내 풀이__

현재까지의 합과 앞으로 계산해야 할 숫자가 0이나 1이 아니면 곱해주도록 했다.

바보 같이 비교를 num == 0 or num == 1 
같은식으로 해서 수정했다 ㅎ ㅠ

접근법은 해답과 같았다.

```python
data = input()

result = int(data[0])

for i in range(1, len(data)):
    num = int(data[i])
    if result <= 1 or num <= 1:
        result += num
    else:
        result *= num

print(result)
```

